{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/alipay.png","path":"img/alipay.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1531134854214},{"_id":"themes/yilia/.DS_Store","hash":"aedcbe1962dafac58a19f6acca57683c37cd2907","modified":1531134365841},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1531128011570},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1531128011570},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1531128011570},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1531128011570},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1531128011570},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1531128011571},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1531128011571},{"_id":"themes/yilia/_config.yml","hash":"31e6af07d9d813937189688e22f43728af778362","modified":1541904917298},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1531128011582},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1531128011603},{"_id":"source/_posts/1.md","hash":"8c3edd7d1e7eb89aec3b8195227a8999a688bb12","modified":1531192565996},{"_id":"source/_posts/hello-world.md.example","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1531125716476},{"_id":"source/_posts/second.md","hash":"cf5169369f2a85eded97522fe4a56038bf1efde8","modified":1531897662116},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1531128011571},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1531128011572},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1531128011572},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1531128011572},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1531128011572},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1531128011572},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1531128011573},{"_id":"themes/yilia/layout/.DS_Store","hash":"a762a88108e5254efed9fb9388b5c6064f3c3438","modified":1531134365840},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1531128011581},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1531128011581},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1531128011581},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1531128011581},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1531128011581},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1531128011582},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1531128011582},{"_id":"themes/yilia/source/.DS_Store","hash":"74809e461e384aae10a7f2166f95a38995779ab3","modified":1531898623046},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1531128011600},{"_id":"themes/yilia/source-src/.DS_Store","hash":"235f00c5fb427b74effd5d032d65a5e60319c371","modified":1531134359255},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1531128011603},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1531128011583},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1531128011597},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531128011580},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1531128011602},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1531128011603},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1531128011573},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1531128011573},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1531128011573},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1531128011574},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1531128011574},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1531128011574},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1531128011574},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"68ee16baf2559967ade84bea04b6f08673af8419","modified":1531144434286},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1531128011574},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1531128011574},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1531128011575},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1531128011575},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1531128011575},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1531128011576},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1531128011580},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1531128011580},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1531128011598},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1531128011598},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1531128011598},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1531128011598},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1531128011599},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1531128011599},{"_id":"themes/yilia/source/img/.DS_Store","hash":"c206f3a9e0f714a895b41eb8e494437e95ca013c","modified":1531133676596},{"_id":"themes/yilia/source/img/avatar.jpg","hash":"ac217e04b66f1ddf4b1f99268f00d7ce2bb3c818","modified":1531129474992},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1531128011599},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1531128011599},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1531128011599},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1531128011583},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1531128011584},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1531128011584},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1531194217094},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1531128011584},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1531128011585},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1531128011585},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1531128011585},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1531128011585},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1531193959230},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1531128011589},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1531128011590},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1531128011590},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1531128011590},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1531128011591},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1531128011592},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1531128011592},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1531128011593},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1531128011592},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1531128011593},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1531128011593},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1531128011593},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1531128011593},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1531128011594},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1531128011594},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1531128011594},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1531128011594},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1531128011595},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1531128011595},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1531128011595},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1531128011596},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1531128011596},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1531128011596},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1531128011596},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1531128011596},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1531128011597},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1531128011597},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1531128011597},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1531128011597},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1531128011579},{"_id":"themes/yilia/source/img/alipay.png","hash":"b6609ac254ef902d40f99cc409671339f7a727a4","modified":1531133168805},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1531128011576},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1531128011576},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1531128011576},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1531128011577},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1531128011577},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1531128011577},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1531128011577},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1531128011578},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1531128011578},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1531128011578},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1531128011585},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1531128011586},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1531128011587},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1531128011586},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1531128011587},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1531128011588},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1531128011588},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1531128011589},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1531128011588},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1531128011590},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1531128011591},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1531128011591},{"_id":"public/content.json","hash":"d37d7c940051397b1f761fafb10225fe2c95af2b","modified":1541904683370},{"_id":"public/2018/07/10/second/index.html","hash":"69caf00d0221503375484edf1c9330fd6edd12b3","modified":1541904924696},{"_id":"public/2018/07/09/1/index.html","hash":"5b98b600d0a08f937c7afd4730681333f67fbccd","modified":1541904924696},{"_id":"public/archives/index.html","hash":"454c169b5709868e0139e4ff43af04ad934c59cd","modified":1541904924697},{"_id":"public/archives/2018/index.html","hash":"cab3957c42f0b893811407b95444e8bd7c548ee1","modified":1541904924698},{"_id":"public/archives/2018/07/index.html","hash":"af7e88271270061f07a8906991131af46fccd6c5","modified":1541904924698},{"_id":"public/index.html","hash":"98064e8ef8c56ec54a6950f078d1c304045c3607","modified":1541904924697},{"_id":"public/tags/随笔/index.html","hash":"1234d19d317713c6f14d4cc5ce00aceed1b9d3e5","modified":1541904924697},{"_id":"public/tags/iOS/index.html","hash":"7c9025f537c968757e6b55ce23e2e5b7214466a6","modified":1541904924697},{"_id":"public/tags/Python/index.html","hash":"1f6c1aa8680eb921b77a9479ff2f3e1d0be871e8","modified":1541904924697},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1541904683504},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1541904683504},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1541904683504},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1541904683504},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1541904683504},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1541904683504},{"_id":"public/img/avatar.jpg","hash":"ac217e04b66f1ddf4b1f99268f00d7ce2bb3c818","modified":1541904683504},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1541904683505},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1541904683505},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1541904683505},{"_id":"public/img/alipay.png","hash":"b6609ac254ef902d40f99cc409671339f7a727a4","modified":1541904683507},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1541904683514},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1541904683515},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1541904683516},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1541904683520}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"iOS inline 、define 、typedef 的区别","date":"2018-07-09T11:12:51.000Z","_content":"\ndefine：**定义预编译时处理的宏**；\n\n只进行简单的字符替换，无类型检测\n\ntypedef：**定义类型别名 用于处理复杂类型**\n\n例： typedef int A；\n\n则：A a； //定义a为int\n\ninline:**内联函数对编译器提出建议，是否进行宏替换，编译器有权拒绝**\n\n既为提出申请，不一定会成功\n\n------\n\n#### **inline** \n\n1) 产生背景\n\ninline这个关键字的引入原因和const十分相似，inline 关键字用来定义一个类的内联函数，引入它的主要原因是用它替代C中\n\n表达式形式的宏定义。\n\n表达式形式的宏定义一例：\n\n\\#define ExpressionName(Var1,Var2) (Var1+Var2)*(Var1-Var2)\n\n这种表达式形式宏形式与作用跟函数类似，但它使用预编译器，没有堆栈，使用上比函数高效。但它只是预编译器上符号表的简单替换，不能进行参数有效性检测及使用C++类的成员访问控制。\n\n**inline 推出的目的**，也正是为了取代这种表达式形式的宏定义，它消除了它的缺点，同时又很好地继承了它的优点。inline代码放入预编译器符号表中，高效；它是个真正的函数，调用时有严格的参数检测；它也可作为类的成员函数。\n\n2) 具体作用\n\n直接在class类定义中定义各函数成员，系统将他们作为内联函数处理；成员函数是内联函数，意味着：每个对象都有该函数一份独立的拷贝。\n\n在类外，如果使用关键字inline定义函数成员，则系统也会作为内联函数处理；\n\n[iOS内联函数实战测试（仅供参考）](https://link.jianshu.com/?t=http://blog.csdn.net/chsadin/article/details/47982923)\n\n\n#### #define （宏名要替换的代码）\n\n宏定义，保存在预编译器的符号表中，执行高效；作为一种简单的符号替换，不进行其中参数有效性的检测\n\n\n#### typedef （已有类型 新类型）\n\n别名, 常用于创建平台无关类型, typedef 在编译时被解释，因此让编译器来应付超越预处理器能力的文本替换\n\n\n","source":"_posts/1.md","raw":"---\ntitle: iOS inline 、define 、typedef 的区别\ndate: 2018-07-09 19:12:51\ntags:\n  - 随笔\n  - iOS\n  - Python\n---\n\ndefine：**定义预编译时处理的宏**；\n\n只进行简单的字符替换，无类型检测\n\ntypedef：**定义类型别名 用于处理复杂类型**\n\n例： typedef int A；\n\n则：A a； //定义a为int\n\ninline:**内联函数对编译器提出建议，是否进行宏替换，编译器有权拒绝**\n\n既为提出申请，不一定会成功\n\n------\n\n#### **inline** \n\n1) 产生背景\n\ninline这个关键字的引入原因和const十分相似，inline 关键字用来定义一个类的内联函数，引入它的主要原因是用它替代C中\n\n表达式形式的宏定义。\n\n表达式形式的宏定义一例：\n\n\\#define ExpressionName(Var1,Var2) (Var1+Var2)*(Var1-Var2)\n\n这种表达式形式宏形式与作用跟函数类似，但它使用预编译器，没有堆栈，使用上比函数高效。但它只是预编译器上符号表的简单替换，不能进行参数有效性检测及使用C++类的成员访问控制。\n\n**inline 推出的目的**，也正是为了取代这种表达式形式的宏定义，它消除了它的缺点，同时又很好地继承了它的优点。inline代码放入预编译器符号表中，高效；它是个真正的函数，调用时有严格的参数检测；它也可作为类的成员函数。\n\n2) 具体作用\n\n直接在class类定义中定义各函数成员，系统将他们作为内联函数处理；成员函数是内联函数，意味着：每个对象都有该函数一份独立的拷贝。\n\n在类外，如果使用关键字inline定义函数成员，则系统也会作为内联函数处理；\n\n[iOS内联函数实战测试（仅供参考）](https://link.jianshu.com/?t=http://blog.csdn.net/chsadin/article/details/47982923)\n\n\n#### #define （宏名要替换的代码）\n\n宏定义，保存在预编译器的符号表中，执行高效；作为一种简单的符号替换，不进行其中参数有效性的检测\n\n\n#### typedef （已有类型 新类型）\n\n别名, 常用于创建平台无关类型, typedef 在编译时被解释，因此让编译器来应付超越预处理器能力的文本替换\n\n\n","slug":"1","published":1,"updated":"2018-07-10T03:16:05.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjsev21k0000cgqrpxw5sn75","content":"<p>define：<strong>定义预编译时处理的宏</strong>；</p>\n<p>只进行简单的字符替换，无类型检测</p>\n<p>typedef：<strong>定义类型别名 用于处理复杂类型</strong></p>\n<p>例： typedef int A；</p>\n<p>则：A a； //定义a为int</p>\n<p>inline:<strong>内联函数对编译器提出建议，是否进行宏替换，编译器有权拒绝</strong></p>\n<p>既为提出申请，不一定会成功</p>\n<hr>\n<h4 id=\"inline\"><a href=\"#inline\" class=\"headerlink\" title=\"inline\"></a><strong>inline</strong></h4><p>1) 产生背景</p>\n<p>inline这个关键字的引入原因和const十分相似，inline 关键字用来定义一个类的内联函数，引入它的主要原因是用它替代C中</p>\n<p>表达式形式的宏定义。</p>\n<p>表达式形式的宏定义一例：</p>\n<p>#define ExpressionName(Var1,Var2) (Var1+Var2)*(Var1-Var2)</p>\n<p>这种表达式形式宏形式与作用跟函数类似，但它使用预编译器，没有堆栈，使用上比函数高效。但它只是预编译器上符号表的简单替换，不能进行参数有效性检测及使用C++类的成员访问控制。</p>\n<p><strong>inline 推出的目的</strong>，也正是为了取代这种表达式形式的宏定义，它消除了它的缺点，同时又很好地继承了它的优点。inline代码放入预编译器符号表中，高效；它是个真正的函数，调用时有严格的参数检测；它也可作为类的成员函数。</p>\n<p>2) 具体作用</p>\n<p>直接在class类定义中定义各函数成员，系统将他们作为内联函数处理；成员函数是内联函数，意味着：每个对象都有该函数一份独立的拷贝。</p>\n<p>在类外，如果使用关键字inline定义函数成员，则系统也会作为内联函数处理；</p>\n<p><a href=\"https://link.jianshu.com/?t=http://blog.csdn.net/chsadin/article/details/47982923\" target=\"_blank\" rel=\"noopener\">iOS内联函数实战测试（仅供参考）</a></p>\n<h4 id=\"define-（宏名要替换的代码）\"><a href=\"#define-（宏名要替换的代码）\" class=\"headerlink\" title=\"#define （宏名要替换的代码）\"></a>#define （宏名要替换的代码）</h4><p>宏定义，保存在预编译器的符号表中，执行高效；作为一种简单的符号替换，不进行其中参数有效性的检测</p>\n<h4 id=\"typedef-（已有类型-新类型）\"><a href=\"#typedef-（已有类型-新类型）\" class=\"headerlink\" title=\"typedef （已有类型 新类型）\"></a>typedef （已有类型 新类型）</h4><p>别名, 常用于创建平台无关类型, typedef 在编译时被解释，因此让编译器来应付超越预处理器能力的文本替换</p>\n","site":{"data":{}},"excerpt":"","more":"<p>define：<strong>定义预编译时处理的宏</strong>；</p>\n<p>只进行简单的字符替换，无类型检测</p>\n<p>typedef：<strong>定义类型别名 用于处理复杂类型</strong></p>\n<p>例： typedef int A；</p>\n<p>则：A a； //定义a为int</p>\n<p>inline:<strong>内联函数对编译器提出建议，是否进行宏替换，编译器有权拒绝</strong></p>\n<p>既为提出申请，不一定会成功</p>\n<hr>\n<h4 id=\"inline\"><a href=\"#inline\" class=\"headerlink\" title=\"inline\"></a><strong>inline</strong></h4><p>1) 产生背景</p>\n<p>inline这个关键字的引入原因和const十分相似，inline 关键字用来定义一个类的内联函数，引入它的主要原因是用它替代C中</p>\n<p>表达式形式的宏定义。</p>\n<p>表达式形式的宏定义一例：</p>\n<p>#define ExpressionName(Var1,Var2) (Var1+Var2)*(Var1-Var2)</p>\n<p>这种表达式形式宏形式与作用跟函数类似，但它使用预编译器，没有堆栈，使用上比函数高效。但它只是预编译器上符号表的简单替换，不能进行参数有效性检测及使用C++类的成员访问控制。</p>\n<p><strong>inline 推出的目的</strong>，也正是为了取代这种表达式形式的宏定义，它消除了它的缺点，同时又很好地继承了它的优点。inline代码放入预编译器符号表中，高效；它是个真正的函数，调用时有严格的参数检测；它也可作为类的成员函数。</p>\n<p>2) 具体作用</p>\n<p>直接在class类定义中定义各函数成员，系统将他们作为内联函数处理；成员函数是内联函数，意味着：每个对象都有该函数一份独立的拷贝。</p>\n<p>在类外，如果使用关键字inline定义函数成员，则系统也会作为内联函数处理；</p>\n<p><a href=\"https://link.jianshu.com/?t=http://blog.csdn.net/chsadin/article/details/47982923\" target=\"_blank\" rel=\"noopener\">iOS内联函数实战测试（仅供参考）</a></p>\n<h4 id=\"define-（宏名要替换的代码）\"><a href=\"#define-（宏名要替换的代码）\" class=\"headerlink\" title=\"#define （宏名要替换的代码）\"></a>#define （宏名要替换的代码）</h4><p>宏定义，保存在预编译器的符号表中，执行高效；作为一种简单的符号替换，不进行其中参数有效性的检测</p>\n<h4 id=\"typedef-（已有类型-新类型）\"><a href=\"#typedef-（已有类型-新类型）\" class=\"headerlink\" title=\"typedef （已有类型 新类型）\"></a>typedef （已有类型 新类型）</h4><p>别名, 常用于创建平台无关类型, typedef 在编译时被解释，因此让编译器来应付超越预处理器能力的文本替换</p>\n"},{"title":"iOS：使用jenkins实现xcode自动打包（最新）","date":"2018-07-10T02:55:21.000Z","_content":"参考各种教程实现Jenkins自动化打包遇到点坑，特此把自己成功安装的步骤记录一下。\n\n**一.安装jenkins**\n\n**首先使用osx系统自带的homebrew来安装jenkins。**\n\n**在终端中运行：**\n\n> **$ brew install Jenkins**  \n>\n> 第一步需要安装至少java1.8 ，如果没有安装会有提示，[java安装地址](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-e8624d879d33bacd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n无java时报错\n\njava安装完毕，继续下面步骤，链接 launchd 配置文件\n\n> $ ln -sfv/usr/local/opt/jenkins/*.plist ~/Library/LaunchAgents  \n>\n> //如果要其他机器也可以访问，把ip地址改为广播地址:--httpListenAddress=0.0.0.0\n>\n> $ launchctl load~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist  \n\n命令行启动Jenkins\n\n> $ jenkins\n\n一切顺利的话，打开浏览器输入：http://localhost:8080/\n\n就能看到jenkins已经运行起来了，如果你更换了端口就是你后来设置的端口。\n\n接下来打开Jenkins后会让去一个填写password的页面如下图，存储password的地方就是图片上那行红色字体目录下，使用终端 cat + 红色字体路径就看到了\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-3744bb8265501e3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n然后将我们得到的password输入到“Administrator password“中，即可进入如下界面，接着安装一些建议的插件（左边的），安装过程中，有的插件可能会安装失败，强烈建议点击右下角的重试，直到把建议安装的都装好。（因为我这边安装之后，在Jenkins插件管理安装插件一直失败，如果这一步没把有些必须的插件装好，如git，只能一个个下载上传插件就很麻烦）\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-c330d4e3801bc125.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n插件安装完成后，可能会卡在如下界面，不会自动跳转，刷新下界面即可：\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-92680cf279d6f69c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n插件\n\n在刷新后的界面中注册，输入用户名和密码，建议输入后点蓝色按钮保存完成，如下：\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-355ccb29dace90e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n注册成功后，点击”Start using Jenkins”\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-1a9a2f3dd1fd7a2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/491)\n\n**二.jenkins的使用**\n\n**到这一步，Jenkins的安装基本完成，接下来就是使用了，在新建任务之前需要安装好对应的插件**\n\n**1.安装插件**\n\n**Keychains and Provisioning Profiles Management（管理本地的keychain和iOS证书的插件）**\n\n**Xcode integration （用于xcode构建）**\n\n**打开系统管理，管理插件详见图**\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-6bda0d917eb1d719.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n**安装方式：**\n\n**方案一：在可选中搜索插件名 ，勾选安装。若安装报错（参照安装Jenkins时不能联网安装插件问题解决），如果还不行，直接进入方案二。**\n\n**方案二：去Jenkins-plug官网下载插件，然后选择高级tab，上传.hpi文件**\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-3e2da1a793135b1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n**2.配置Keychains and Provisioning Profiles Management**\n\n接下来配置Keychains and Provisioning Profiles Management，根据顺序选择首页>*系统管理>Keychains and Provisioning Profiles Management*如图\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-7be0865bd31c03e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n**需要上传login.keychain文件，该文件获取方法，在终端中输入**\n\n> cd ~/Library/Keychains\n\n**在终端键入ls详见下图**\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-df6b6eb19bce631d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n将login.keychain文件upload之后，会出现下图的界面，根据需要将证书添加进去即可，但是由于macOS10.12以及以后的系统里面没有login.keychain文件，只有login.keychain-db,可以复制出来删除-db，也可以创建一个快捷方式名字叫做login.keychain，upload就好了。（上传keychain，路径用自己改名后的那个）\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-13e8ae3bc326ce0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n然后添加Provisioning Profiles，上传方法和上传login.keychain一样，去选择Provisioning Profiles文件，然后upload，然后结果如下图，**蓝色框**内的是固定格式的**/Users/用户名/Library/MobileDevice/Provisioning Profiles**\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-c748ac2b114c670e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n**3.开始配置任务**\n\n然后创建一个任务，自由风格的任务，因为构建方法会有两种,除了共同的地方，构建会分为两部分解答，第一部分是macOS10.12以前的构建方法，但是由于Jenkins的Xcode和Mac的系统版本问题，所以建议使用第二种方法。\n\nGeneral\n\n创建一个自由风格的任务，然后在选择丢弃旧的构建，至于天数和保持的最大个数，按照自己的需求来就好，如图\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-3ce2cf68feb817fc.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n源码管理\n\n接下来是源码管理，在**Repository URL**里面添加你的git地址，我这里添加的是*http*的，如果你的项目是使用的ssh的，那么就将git开头的地址填写上，然后店家**Add**添加你的git帐号，如果你的事ssh的，将ssh的密匙填写上，具体的自己百度一下就好咯，我就不多写了，结果如图\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-60eaaca3a34ac160.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n构建触发器\n\n接下来是构建触发器，也就是什么时候触发自动打包我这里填写的是H 20 * * *这个意思就是H小时然后，后面跟着数字，在后面就是日月年，*代表的我认为是每次都触发，也就是每天每月每年，但是Jenkins的时间不是绝对的，一般都是在随机在半点，也就是设置20点，大概会在20:30分左右会触发，如果需要两个时间，那么格式可以这样H 20,22 * * *结果如图\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-fb89921af6677d23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n构建环境\n\n在构建环境里面勾选**Keychains and Code Signing Identities**和**Mobile Provisioning Profiles**，**Keychains and Code Signing Identities**是打包需要的证书，**Mobile Provisioning Profiles**是打包需要的配置文件，都是可以自己选择的，我的如图14\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-6ba2dc28a1b1abb7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n接下来就是构建了，因为Jenkins对新版的Xcode插件兼容不好，只能用脚本来打包，但是老版本的Xcode可以使用Jenkins的Xcode插件，下面将构建一为使用Xcode插件的，构建二是脚本的\n\n**构建一，使用Xcode插件**\n\n在构建里面点击**增加构建步骤**，然后点击Xcode.\n\n**General build settings**\n\n在**Target**里面填写你的项目名称，**Clean before build**勾选YES，勾选**Pack application, build and sign .ipa?**，然后会有新的选项**Export method**是你要打的包的类型，就是你在手动打包的时候选额的ad-hoc或者Appstore那四个选项，这个按照你要打的类型填写，**.ipa filename pattern**是你打出包ipa的名字，我的这里填写了项目名字和-$(BUILD_DATE)，意思就是在后面追加时间，**Output directory**是导出ipa的目录，如果不填写，会在Jenkins默认的目录.\n\n详见图\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-6dc4898f135c412b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n**Code signing & OS X keychain options**\n\n勾选**Unlock Keychain?**,在**Keychain path**那里填写${HOME}/Library/Keychains/login.keychain,意思是找到你的login.keychain（登陆钥匙串），如果你的是复制出来改的名字，**那么就填写你相对应的目录**，**Keychain password**就是你电脑的登陆密码。详见图\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-09036c0b33938b73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n**Advanced Xcode build options**\n\n勾选**Clean test reports?**，如果你使用了cocoapods那么填写**Xcode Workspace File**，如果没有使用cocoapods填写**Xcode Project Directory**，然后填写**Build output directory**就是你到处ipa的路径,详见图\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-111db80c71ce4e00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n完成之后，回到任务操作页面，点击立即构建，如果配置没问题基本就能构建成功\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-8fe67e5458292a1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n构建进行中\n\n**偶尔会出现报错，点击任务编号，也就是上图的#4#5#6，然后进入任务详情页，进入控制台输出看看哪里出了问题，我之前是报了profile文件不匹配的error（target填错了），然后改了就好了**\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-ef98f94e9f348e1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n控制台输出log\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-1809e09adaa3f87c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n成功，小太阳出来了\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-48e4f9a1f7c80d32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n对应目录生成了文件，所生成的内容也是需要自己选择配置的\n\n**构建二，使用脚本（蒲公英上传请参考https://www.jianshu.com/p/6bab38e569a5）**\n\n因为Jenkins对现在的Xcode9插件兼容性不好，打不了包，所以我们使用了**xcodebuild**打包，下面是我的脚本，并且里面附上了自己非常详细的注释，可能有点啰嗦。\n\n> \\#!/bin/sh  #因为Jenkins打包可能是自动的，那么build号是不会自己再去修改然后push到git上面的，所以这个buildPlist就是修改build号的路径。 buildPlist=\"/Users/apple/.jenkins/workspace/longxin_a/eCloud/Build/LongHu/Config/eCloud-Info.plist\"  #这个获取现在的 月日时分 用它来做build号 buildNumber=$(date +\"%m%d%H%M\")  #修改plist文件需要/usr/libexec/PlistBuddy -c命令，CFBundleVersion是修改的这个build号，$buildNumber是你要修改的数值，$buildPlist是你修改哪个地方的plist文件。 /usr/libexec/PlistBuddy -c \"Set :CFBundleVersion $buildNumber\" \"$buildPlist\"  #这个是获取当前的build号，本来是用来看看有没有修改成功的 #newBuildName=$(/usr/libexec/PlistBuddy -c \"print :CFBundleVersion\" \"$buildPlist\") #这个是打印，带自动换行的打印 echo $newBuildName  #因为我怕他修改plist的时候需要时间，所以索性在这里我让他等了3秒，当然你也可以去掉 sleep 3  #这个buildPath是到时候我生成xcarchive文件的路径和打ipa时候需要找到xcarchive的路径 buildPath=\"/Users/apple/.jenkins/workspace/longxin_a/build/Release-iphoneos/eCloud.xcarchive\"  #这个路径是我生成ipa的路径 ipaPath=\"/Users/apple/Documents/longhuBuild/\"  #这个是ExportOptions.plist的路径，有这个就不用在用脚本写证书了，这个plist你只要手动打过包，那么在生成ipa的文件夹里面就会有，找一个自己不经常修改的地方放在那里，写上这个路径就好，当然如果你不想这么做，想用shell语言设置证书，我会在 问题 列表里面有介绍 exportOptionsplistPath='/Users/apple/.jenkins/workspace/ExportOptions.plist'  #因为我使用了cocoapods所以这里用的-workspace，如果你没有使用cocoapods使用-project，下面的命令都一样 #这个命令主要是用来clean，clean的是Release的路径，clean的是/Users/app***eCloud.xcworkspace路径的eCloud， xcodebuild -workspace /Users/apple/.jenkins/workspace/longxin_a/eCloud.xcworkspace -scheme eCloud -configuration \"Release\" clean  #这个是生成xcarchive，Release的 xcodebuild -workspace /Users/apple/.jenkins/workspace/longxin_a/eCloud.xcworkspace -scheme eCloud -archivePath ${buildPath} -configuration \"Release\" archive  #这个是将xcarchive文件打包成ipa xcodebuild -exportArchive -archivePath ${buildPath} -exportPath ${ipaPath} -exportOptionsPlist ${exportOptionsplistPath} -allowProvisioningUpdates\n\n**邮箱通知**\n\n到这里，其实你就已经打包成功了，但是打包成功后是不是我们需要通知一些人呢？Jenkins是有邮件通知的。\n\n现在开始设置，首先你已经安装了插件Email Extension Plugin，这个在插件那里直接安装就好这是第一步；\n\n然后进入**系统管理**->**系统设置**找到**Jenkins Location**模块，在**系统管理员邮件地址**填写你的系统管理邮箱，这个邮箱是你发送通知邮件的邮箱，\n\n然后找到**Extended E-mail Notification**模块\n\n填写方法如图18图19\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-6aa97f934b9e01b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n图18\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-740f5dc4bb67defb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n图19\n\n然后找到**构建后操作**，点击**增加构建后的操作步骤**点击**Editable Email Notification**，在**Project From**里面写上管理者邮箱，也就是发送邮件的邮箱，然后点击**Advanced Setting**;\n\n里面有三个选项，分别是你在系统设置里面勾选的那几个，根据需求填写就好，我这里填写的是Always，也就是无论构建成功还是失败,**Recipient List**是接收者的邮箱，**这里多个邮箱用英文逗号隔开——’,’**详见图20\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-b58f75ffeb8b689f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n图20\n\n上传到fir\n\n先去下载fir插件\n\n然后在Jenkins里面点击**系统管理**->**管理插件**->**高级**，然后滑动到上传插件那里，选择刚才下载的插件，点击**上传**，等待上传成功后，进入到你的项目配置里面滑动到最下面，也就是找到**构建后操作**，点击**增加构建后操作步骤**，选择**Upload to fir.im**，打开你的浏览器，打开fir官方网站,获取方法见图21\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-fa9ca79d036f4791.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n21的\n\n然后输入你的**IPA/APK Files (optional)**这个是你ipa的路径，如果不选择，会是Jenkins默认的路径\n\n这里有fir的官方文档，根据fir的官方文档即可就可以Jenkins上传到fir文档\n\n到此为止关于Jenkins整合Xcode的配置项并自动上传到蒲公英差不多就说好了。那么可以稍微构建一下项目试试了，构建完项目后，你就会发现测试人员不需要天天来烦你，再也不需要听到“开发狗，赶紧给我安装一个最新的版本”了。\n\n各位可能会用到的友情链接：\n\n[jenkins 密码错误去掉密码登录](https://www.cnblogs.com/xiami303/p/3625829.html)(mac路径为/Users/用户名/.jenkins)\n\n[Jenkins 修改登录密码](https://blog.csdn.net/qq105319914/article/details/52094463)\n\n[Jenkins 卸载](https://www.cnblogs.com/EasonJim/p/6277708.html)\n\n参考教程：\n\nhttp://blog.csdn.net/u014641783/article/details/50866196\n\nhttps://blog.x1be.win/index.php/2018/06/19/jenkins%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E3%80%81%E6%9E%84%E5%BB%BA%E3%80%81%E8%84%9A%E6%9C%AC%E3%80%81%E9%85%8D%E7%BD%AE%E9%82%AE%E7%AE%B1%E3%80%81%E4%B8%8A%E4%BC%A0fir/","source":"_posts/second.md","raw":"---\ntitle: iOS：使用jenkins实现xcode自动打包（最新）\ndate: 2018-07-10 10:55:21\ntags:\n  - iOS\n  - Python\n---\n参考各种教程实现Jenkins自动化打包遇到点坑，特此把自己成功安装的步骤记录一下。\n\n**一.安装jenkins**\n\n**首先使用osx系统自带的homebrew来安装jenkins。**\n\n**在终端中运行：**\n\n> **$ brew install Jenkins**  \n>\n> 第一步需要安装至少java1.8 ，如果没有安装会有提示，[java安装地址](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-e8624d879d33bacd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n无java时报错\n\njava安装完毕，继续下面步骤，链接 launchd 配置文件\n\n> $ ln -sfv/usr/local/opt/jenkins/*.plist ~/Library/LaunchAgents  \n>\n> //如果要其他机器也可以访问，把ip地址改为广播地址:--httpListenAddress=0.0.0.0\n>\n> $ launchctl load~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist  \n\n命令行启动Jenkins\n\n> $ jenkins\n\n一切顺利的话，打开浏览器输入：http://localhost:8080/\n\n就能看到jenkins已经运行起来了，如果你更换了端口就是你后来设置的端口。\n\n接下来打开Jenkins后会让去一个填写password的页面如下图，存储password的地方就是图片上那行红色字体目录下，使用终端 cat + 红色字体路径就看到了\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-3744bb8265501e3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n然后将我们得到的password输入到“Administrator password“中，即可进入如下界面，接着安装一些建议的插件（左边的），安装过程中，有的插件可能会安装失败，强烈建议点击右下角的重试，直到把建议安装的都装好。（因为我这边安装之后，在Jenkins插件管理安装插件一直失败，如果这一步没把有些必须的插件装好，如git，只能一个个下载上传插件就很麻烦）\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-c330d4e3801bc125.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n插件安装完成后，可能会卡在如下界面，不会自动跳转，刷新下界面即可：\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-92680cf279d6f69c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n插件\n\n在刷新后的界面中注册，输入用户名和密码，建议输入后点蓝色按钮保存完成，如下：\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-355ccb29dace90e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n注册成功后，点击”Start using Jenkins”\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-1a9a2f3dd1fd7a2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/491)\n\n**二.jenkins的使用**\n\n**到这一步，Jenkins的安装基本完成，接下来就是使用了，在新建任务之前需要安装好对应的插件**\n\n**1.安装插件**\n\n**Keychains and Provisioning Profiles Management（管理本地的keychain和iOS证书的插件）**\n\n**Xcode integration （用于xcode构建）**\n\n**打开系统管理，管理插件详见图**\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-6bda0d917eb1d719.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n**安装方式：**\n\n**方案一：在可选中搜索插件名 ，勾选安装。若安装报错（参照安装Jenkins时不能联网安装插件问题解决），如果还不行，直接进入方案二。**\n\n**方案二：去Jenkins-plug官网下载插件，然后选择高级tab，上传.hpi文件**\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-3e2da1a793135b1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n**2.配置Keychains and Provisioning Profiles Management**\n\n接下来配置Keychains and Provisioning Profiles Management，根据顺序选择首页>*系统管理>Keychains and Provisioning Profiles Management*如图\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-7be0865bd31c03e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n**需要上传login.keychain文件，该文件获取方法，在终端中输入**\n\n> cd ~/Library/Keychains\n\n**在终端键入ls详见下图**\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-df6b6eb19bce631d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n将login.keychain文件upload之后，会出现下图的界面，根据需要将证书添加进去即可，但是由于macOS10.12以及以后的系统里面没有login.keychain文件，只有login.keychain-db,可以复制出来删除-db，也可以创建一个快捷方式名字叫做login.keychain，upload就好了。（上传keychain，路径用自己改名后的那个）\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-13e8ae3bc326ce0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n然后添加Provisioning Profiles，上传方法和上传login.keychain一样，去选择Provisioning Profiles文件，然后upload，然后结果如下图，**蓝色框**内的是固定格式的**/Users/用户名/Library/MobileDevice/Provisioning Profiles**\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-c748ac2b114c670e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n**3.开始配置任务**\n\n然后创建一个任务，自由风格的任务，因为构建方法会有两种,除了共同的地方，构建会分为两部分解答，第一部分是macOS10.12以前的构建方法，但是由于Jenkins的Xcode和Mac的系统版本问题，所以建议使用第二种方法。\n\nGeneral\n\n创建一个自由风格的任务，然后在选择丢弃旧的构建，至于天数和保持的最大个数，按照自己的需求来就好，如图\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-3ce2cf68feb817fc.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n源码管理\n\n接下来是源码管理，在**Repository URL**里面添加你的git地址，我这里添加的是*http*的，如果你的项目是使用的ssh的，那么就将git开头的地址填写上，然后店家**Add**添加你的git帐号，如果你的事ssh的，将ssh的密匙填写上，具体的自己百度一下就好咯，我就不多写了，结果如图\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-60eaaca3a34ac160.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n构建触发器\n\n接下来是构建触发器，也就是什么时候触发自动打包我这里填写的是H 20 * * *这个意思就是H小时然后，后面跟着数字，在后面就是日月年，*代表的我认为是每次都触发，也就是每天每月每年，但是Jenkins的时间不是绝对的，一般都是在随机在半点，也就是设置20点，大概会在20:30分左右会触发，如果需要两个时间，那么格式可以这样H 20,22 * * *结果如图\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-fb89921af6677d23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n构建环境\n\n在构建环境里面勾选**Keychains and Code Signing Identities**和**Mobile Provisioning Profiles**，**Keychains and Code Signing Identities**是打包需要的证书，**Mobile Provisioning Profiles**是打包需要的配置文件，都是可以自己选择的，我的如图14\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-6ba2dc28a1b1abb7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n接下来就是构建了，因为Jenkins对新版的Xcode插件兼容不好，只能用脚本来打包，但是老版本的Xcode可以使用Jenkins的Xcode插件，下面将构建一为使用Xcode插件的，构建二是脚本的\n\n**构建一，使用Xcode插件**\n\n在构建里面点击**增加构建步骤**，然后点击Xcode.\n\n**General build settings**\n\n在**Target**里面填写你的项目名称，**Clean before build**勾选YES，勾选**Pack application, build and sign .ipa?**，然后会有新的选项**Export method**是你要打的包的类型，就是你在手动打包的时候选额的ad-hoc或者Appstore那四个选项，这个按照你要打的类型填写，**.ipa filename pattern**是你打出包ipa的名字，我的这里填写了项目名字和-$(BUILD_DATE)，意思就是在后面追加时间，**Output directory**是导出ipa的目录，如果不填写，会在Jenkins默认的目录.\n\n详见图\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-6dc4898f135c412b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n**Code signing & OS X keychain options**\n\n勾选**Unlock Keychain?**,在**Keychain path**那里填写${HOME}/Library/Keychains/login.keychain,意思是找到你的login.keychain（登陆钥匙串），如果你的是复制出来改的名字，**那么就填写你相对应的目录**，**Keychain password**就是你电脑的登陆密码。详见图\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-09036c0b33938b73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n**Advanced Xcode build options**\n\n勾选**Clean test reports?**，如果你使用了cocoapods那么填写**Xcode Workspace File**，如果没有使用cocoapods填写**Xcode Project Directory**，然后填写**Build output directory**就是你到处ipa的路径,详见图\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-111db80c71ce4e00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n完成之后，回到任务操作页面，点击立即构建，如果配置没问题基本就能构建成功\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-8fe67e5458292a1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n构建进行中\n\n**偶尔会出现报错，点击任务编号，也就是上图的#4#5#6，然后进入任务详情页，进入控制台输出看看哪里出了问题，我之前是报了profile文件不匹配的error（target填错了），然后改了就好了**\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-ef98f94e9f348e1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n控制台输出log\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-1809e09adaa3f87c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n成功，小太阳出来了\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-48e4f9a1f7c80d32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n对应目录生成了文件，所生成的内容也是需要自己选择配置的\n\n**构建二，使用脚本（蒲公英上传请参考https://www.jianshu.com/p/6bab38e569a5）**\n\n因为Jenkins对现在的Xcode9插件兼容性不好，打不了包，所以我们使用了**xcodebuild**打包，下面是我的脚本，并且里面附上了自己非常详细的注释，可能有点啰嗦。\n\n> \\#!/bin/sh  #因为Jenkins打包可能是自动的，那么build号是不会自己再去修改然后push到git上面的，所以这个buildPlist就是修改build号的路径。 buildPlist=\"/Users/apple/.jenkins/workspace/longxin_a/eCloud/Build/LongHu/Config/eCloud-Info.plist\"  #这个获取现在的 月日时分 用它来做build号 buildNumber=$(date +\"%m%d%H%M\")  #修改plist文件需要/usr/libexec/PlistBuddy -c命令，CFBundleVersion是修改的这个build号，$buildNumber是你要修改的数值，$buildPlist是你修改哪个地方的plist文件。 /usr/libexec/PlistBuddy -c \"Set :CFBundleVersion $buildNumber\" \"$buildPlist\"  #这个是获取当前的build号，本来是用来看看有没有修改成功的 #newBuildName=$(/usr/libexec/PlistBuddy -c \"print :CFBundleVersion\" \"$buildPlist\") #这个是打印，带自动换行的打印 echo $newBuildName  #因为我怕他修改plist的时候需要时间，所以索性在这里我让他等了3秒，当然你也可以去掉 sleep 3  #这个buildPath是到时候我生成xcarchive文件的路径和打ipa时候需要找到xcarchive的路径 buildPath=\"/Users/apple/.jenkins/workspace/longxin_a/build/Release-iphoneos/eCloud.xcarchive\"  #这个路径是我生成ipa的路径 ipaPath=\"/Users/apple/Documents/longhuBuild/\"  #这个是ExportOptions.plist的路径，有这个就不用在用脚本写证书了，这个plist你只要手动打过包，那么在生成ipa的文件夹里面就会有，找一个自己不经常修改的地方放在那里，写上这个路径就好，当然如果你不想这么做，想用shell语言设置证书，我会在 问题 列表里面有介绍 exportOptionsplistPath='/Users/apple/.jenkins/workspace/ExportOptions.plist'  #因为我使用了cocoapods所以这里用的-workspace，如果你没有使用cocoapods使用-project，下面的命令都一样 #这个命令主要是用来clean，clean的是Release的路径，clean的是/Users/app***eCloud.xcworkspace路径的eCloud， xcodebuild -workspace /Users/apple/.jenkins/workspace/longxin_a/eCloud.xcworkspace -scheme eCloud -configuration \"Release\" clean  #这个是生成xcarchive，Release的 xcodebuild -workspace /Users/apple/.jenkins/workspace/longxin_a/eCloud.xcworkspace -scheme eCloud -archivePath ${buildPath} -configuration \"Release\" archive  #这个是将xcarchive文件打包成ipa xcodebuild -exportArchive -archivePath ${buildPath} -exportPath ${ipaPath} -exportOptionsPlist ${exportOptionsplistPath} -allowProvisioningUpdates\n\n**邮箱通知**\n\n到这里，其实你就已经打包成功了，但是打包成功后是不是我们需要通知一些人呢？Jenkins是有邮件通知的。\n\n现在开始设置，首先你已经安装了插件Email Extension Plugin，这个在插件那里直接安装就好这是第一步；\n\n然后进入**系统管理**->**系统设置**找到**Jenkins Location**模块，在**系统管理员邮件地址**填写你的系统管理邮箱，这个邮箱是你发送通知邮件的邮箱，\n\n然后找到**Extended E-mail Notification**模块\n\n填写方法如图18图19\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-6aa97f934b9e01b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n图18\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-740f5dc4bb67defb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n图19\n\n然后找到**构建后操作**，点击**增加构建后的操作步骤**点击**Editable Email Notification**，在**Project From**里面写上管理者邮箱，也就是发送邮件的邮箱，然后点击**Advanced Setting**;\n\n里面有三个选项，分别是你在系统设置里面勾选的那几个，根据需求填写就好，我这里填写的是Always，也就是无论构建成功还是失败,**Recipient List**是接收者的邮箱，**这里多个邮箱用英文逗号隔开——’,’**详见图20\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-b58f75ffeb8b689f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n图20\n\n上传到fir\n\n先去下载fir插件\n\n然后在Jenkins里面点击**系统管理**->**管理插件**->**高级**，然后滑动到上传插件那里，选择刚才下载的插件，点击**上传**，等待上传成功后，进入到你的项目配置里面滑动到最下面，也就是找到**构建后操作**，点击**增加构建后操作步骤**，选择**Upload to fir.im**，打开你的浏览器，打开fir官方网站,获取方法见图21\n\n![img](https://upload-images.jianshu.io/upload_images/3499748-fa9ca79d036f4791.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n21的\n\n然后输入你的**IPA/APK Files (optional)**这个是你ipa的路径，如果不选择，会是Jenkins默认的路径\n\n这里有fir的官方文档，根据fir的官方文档即可就可以Jenkins上传到fir文档\n\n到此为止关于Jenkins整合Xcode的配置项并自动上传到蒲公英差不多就说好了。那么可以稍微构建一下项目试试了，构建完项目后，你就会发现测试人员不需要天天来烦你，再也不需要听到“开发狗，赶紧给我安装一个最新的版本”了。\n\n各位可能会用到的友情链接：\n\n[jenkins 密码错误去掉密码登录](https://www.cnblogs.com/xiami303/p/3625829.html)(mac路径为/Users/用户名/.jenkins)\n\n[Jenkins 修改登录密码](https://blog.csdn.net/qq105319914/article/details/52094463)\n\n[Jenkins 卸载](https://www.cnblogs.com/EasonJim/p/6277708.html)\n\n参考教程：\n\nhttp://blog.csdn.net/u014641783/article/details/50866196\n\nhttps://blog.x1be.win/index.php/2018/06/19/jenkins%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E3%80%81%E6%9E%84%E5%BB%BA%E3%80%81%E8%84%9A%E6%9C%AC%E3%80%81%E9%85%8D%E7%BD%AE%E9%82%AE%E7%AE%B1%E3%80%81%E4%B8%8A%E4%BC%A0fir/","slug":"second","published":1,"updated":"2018-07-18T07:07:42.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjsev22d0007cgqrdy5nril8","content":"<p>参考各种教程实现Jenkins自动化打包遇到点坑，特此把自己成功安装的步骤记录一下。</p>\n<p><strong>一.安装jenkins</strong></p>\n<p><strong>首先使用osx系统自带的homebrew来安装jenkins。</strong></p>\n<p><strong>在终端中运行：</strong></p>\n<blockquote>\n<p><strong>$ brew install Jenkins</strong>  </p>\n<p>第一步需要安装至少java1.8 ，如果没有安装会有提示，<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">java安装地址</a></p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-e8624d879d33bacd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>无java时报错</p>\n<p>java安装完毕，继续下面步骤，链接 launchd 配置文件</p>\n<blockquote>\n<p>$ ln -sfv/usr/local/opt/jenkins/*.plist ~/Library/LaunchAgents  </p>\n<p>//如果要其他机器也可以访问，把ip地址改为广播地址:–httpListenAddress=0.0.0.0</p>\n<p>$ launchctl load~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist  </p>\n</blockquote>\n<p>命令行启动Jenkins</p>\n<blockquote>\n<p>$ jenkins</p>\n</blockquote>\n<p>一切顺利的话，打开浏览器输入：<a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/</a></p>\n<p>就能看到jenkins已经运行起来了，如果你更换了端口就是你后来设置的端口。</p>\n<p>接下来打开Jenkins后会让去一个填写password的页面如下图，存储password的地方就是图片上那行红色字体目录下，使用终端 cat + 红色字体路径就看到了</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-3744bb8265501e3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>然后将我们得到的password输入到“Administrator password“中，即可进入如下界面，接着安装一些建议的插件（左边的），安装过程中，有的插件可能会安装失败，强烈建议点击右下角的重试，直到把建议安装的都装好。（因为我这边安装之后，在Jenkins插件管理安装插件一直失败，如果这一步没把有些必须的插件装好，如git，只能一个个下载上传插件就很麻烦）</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-c330d4e3801bc125.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>插件安装完成后，可能会卡在如下界面，不会自动跳转，刷新下界面即可：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-92680cf279d6f69c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>插件</p>\n<p>在刷新后的界面中注册，输入用户名和密码，建议输入后点蓝色按钮保存完成，如下：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-355ccb29dace90e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>注册成功后，点击”Start using Jenkins”</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-1a9a2f3dd1fd7a2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/491\" alt=\"img\"></p>\n<p><strong>二.jenkins的使用</strong></p>\n<p><strong>到这一步，Jenkins的安装基本完成，接下来就是使用了，在新建任务之前需要安装好对应的插件</strong></p>\n<p><strong>1.安装插件</strong></p>\n<p><strong>Keychains and Provisioning Profiles Management（管理本地的keychain和iOS证书的插件）</strong></p>\n<p><strong>Xcode integration （用于xcode构建）</strong></p>\n<p><strong>打开系统管理，管理插件详见图</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-6bda0d917eb1d719.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p><strong>安装方式：</strong></p>\n<p><strong>方案一：在可选中搜索插件名 ，勾选安装。若安装报错（参照安装Jenkins时不能联网安装插件问题解决），如果还不行，直接进入方案二。</strong></p>\n<p><strong>方案二：去Jenkins-plug官网下载插件，然后选择高级tab，上传.hpi文件</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-3e2da1a793135b1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p><strong>2.配置Keychains and Provisioning Profiles Management</strong></p>\n<p>接下来配置Keychains and Provisioning Profiles Management，根据顺序选择首页&gt;<em>系统管理&gt;Keychains and Provisioning Profiles Management</em>如图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-7be0865bd31c03e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p><strong>需要上传login.keychain文件，该文件获取方法，在终端中输入</strong></p>\n<blockquote>\n<p>cd ~/Library/Keychains</p>\n</blockquote>\n<p><strong>在终端键入ls详见下图</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-df6b6eb19bce631d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>将login.keychain文件upload之后，会出现下图的界面，根据需要将证书添加进去即可，但是由于macOS10.12以及以后的系统里面没有login.keychain文件，只有login.keychain-db,可以复制出来删除-db，也可以创建一个快捷方式名字叫做login.keychain，upload就好了。（上传keychain，路径用自己改名后的那个）</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-13e8ae3bc326ce0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>然后添加Provisioning Profiles，上传方法和上传login.keychain一样，去选择Provisioning Profiles文件，然后upload，然后结果如下图，<strong>蓝色框</strong>内的是固定格式的<strong>/Users/用户名/Library/MobileDevice/Provisioning Profiles</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-c748ac2b114c670e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p><strong>3.开始配置任务</strong></p>\n<p>然后创建一个任务，自由风格的任务，因为构建方法会有两种,除了共同的地方，构建会分为两部分解答，第一部分是macOS10.12以前的构建方法，但是由于Jenkins的Xcode和Mac的系统版本问题，所以建议使用第二种方法。</p>\n<p>General</p>\n<p>创建一个自由风格的任务，然后在选择丢弃旧的构建，至于天数和保持的最大个数，按照自己的需求来就好，如图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-3ce2cf68feb817fc.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>源码管理</p>\n<p>接下来是源码管理，在<strong>Repository URL</strong>里面添加你的git地址，我这里添加的是<em>http</em>的，如果你的项目是使用的ssh的，那么就将git开头的地址填写上，然后店家<strong>Add</strong>添加你的git帐号，如果你的事ssh的，将ssh的密匙填写上，具体的自己百度一下就好咯，我就不多写了，结果如图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-60eaaca3a34ac160.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>构建触发器</p>\n<p>接下来是构建触发器，也就是什么时候触发自动打包我这里填写的是H 20 <em> </em> <em>这个意思就是H小时然后，后面跟着数字，在后面就是日月年，</em>代表的我认为是每次都触发，也就是每天每月每年，但是Jenkins的时间不是绝对的，一般都是在随机在半点，也就是设置20点，大概会在20:30分左右会触发，如果需要两个时间，那么格式可以这样H 20,22 <em> </em> *结果如图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-fb89921af6677d23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>构建环境</p>\n<p>在构建环境里面勾选<strong>Keychains and Code Signing Identities</strong>和<strong>Mobile Provisioning Profiles</strong>，<strong>Keychains and Code Signing Identities</strong>是打包需要的证书，<strong>Mobile Provisioning Profiles</strong>是打包需要的配置文件，都是可以自己选择的，我的如图14</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-6ba2dc28a1b1abb7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>接下来就是构建了，因为Jenkins对新版的Xcode插件兼容不好，只能用脚本来打包，但是老版本的Xcode可以使用Jenkins的Xcode插件，下面将构建一为使用Xcode插件的，构建二是脚本的</p>\n<p><strong>构建一，使用Xcode插件</strong></p>\n<p>在构建里面点击<strong>增加构建步骤</strong>，然后点击Xcode.</p>\n<p><strong>General build settings</strong></p>\n<p>在<strong>Target</strong>里面填写你的项目名称，<strong>Clean before build</strong>勾选YES，勾选<strong>Pack application, build and sign .ipa?</strong>，然后会有新的选项<strong>Export method</strong>是你要打的包的类型，就是你在手动打包的时候选额的ad-hoc或者Appstore那四个选项，这个按照你要打的类型填写，<strong>.ipa filename pattern</strong>是你打出包ipa的名字，我的这里填写了项目名字和-$(BUILD_DATE)，意思就是在后面追加时间，<strong>Output directory</strong>是导出ipa的目录，如果不填写，会在Jenkins默认的目录.</p>\n<p>详见图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-6dc4898f135c412b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p><strong>Code signing &amp; OS X keychain options</strong></p>\n<p>勾选<strong>Unlock Keychain?</strong>,在<strong>Keychain path</strong>那里填写${HOME}/Library/Keychains/login.keychain,意思是找到你的login.keychain（登陆钥匙串），如果你的是复制出来改的名字，<strong>那么就填写你相对应的目录</strong>，<strong>Keychain password</strong>就是你电脑的登陆密码。详见图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-09036c0b33938b73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p><strong>Advanced Xcode build options</strong></p>\n<p>勾选<strong>Clean test reports?</strong>，如果你使用了cocoapods那么填写<strong>Xcode Workspace File</strong>，如果没有使用cocoapods填写<strong>Xcode Project Directory</strong>，然后填写<strong>Build output directory</strong>就是你到处ipa的路径,详见图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-111db80c71ce4e00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>完成之后，回到任务操作页面，点击立即构建，如果配置没问题基本就能构建成功</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-8fe67e5458292a1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>构建进行中</p>\n<p><strong>偶尔会出现报错，点击任务编号，也就是上图的#4#5#6，然后进入任务详情页，进入控制台输出看看哪里出了问题，我之前是报了profile文件不匹配的error（target填错了），然后改了就好了</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-ef98f94e9f348e1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>控制台输出log</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-1809e09adaa3f87c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>成功，小太阳出来了</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-48e4f9a1f7c80d32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>对应目录生成了文件，所生成的内容也是需要自己选择配置的</p>\n<p><strong>构建二，使用脚本（蒲公英上传请参考<a href=\"https://www.jianshu.com/p/6bab38e569a5）\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/6bab38e569a5）</a></strong></p>\n<p>因为Jenkins对现在的Xcode9插件兼容性不好，打不了包，所以我们使用了<strong>xcodebuild</strong>打包，下面是我的脚本，并且里面附上了自己非常详细的注释，可能有点啰嗦。</p>\n<blockquote>\n<p>#!/bin/sh  #因为Jenkins打包可能是自动的，那么build号是不会自己再去修改然后push到git上面的，所以这个buildPlist就是修改build号的路径。 buildPlist=”/Users/apple/.jenkins/workspace/longxin_a/eCloud/Build/LongHu/Config/eCloud-Info.plist”  #这个获取现在的 月日时分 用它来做build号 buildNumber=$(date +”%m%d%H%M”)  #修改plist文件需要/usr/libexec/PlistBuddy -c命令，CFBundleVersion是修改的这个build号，$buildNumber是你要修改的数值，$buildPlist是你修改哪个地方的plist文件。 /usr/libexec/PlistBuddy -c “Set :CFBundleVersion $buildNumber” “$buildPlist”  #这个是获取当前的build号，本来是用来看看有没有修改成功的 #newBuildName=$(/usr/libexec/PlistBuddy -c “print :CFBundleVersion” “$buildPlist”) #这个是打印，带自动换行的打印 echo $newBuildName  #因为我怕他修改plist的时候需要时间，所以索性在这里我让他等了3秒，当然你也可以去掉 sleep 3  #这个buildPath是到时候我生成xcarchive文件的路径和打ipa时候需要找到xcarchive的路径 buildPath=”/Users/apple/.jenkins/workspace/longxin_a/build/Release-iphoneos/eCloud.xcarchive”  #这个路径是我生成ipa的路径 ipaPath=”/Users/apple/Documents/longhuBuild/“  #这个是ExportOptions.plist的路径，有这个就不用在用脚本写证书了，这个plist你只要手动打过包，那么在生成ipa的文件夹里面就会有，找一个自己不经常修改的地方放在那里，写上这个路径就好，当然如果你不想这么做，想用shell语言设置证书，我会在 问题 列表里面有介绍 exportOptionsplistPath=’/Users/apple/.jenkins/workspace/ExportOptions.plist’  #因为我使用了cocoapods所以这里用的-workspace，如果你没有使用cocoapods使用-project，下面的命令都一样 #这个命令主要是用来clean，clean的是Release的路径，clean的是/Users/app***eCloud.xcworkspace路径的eCloud， xcodebuild -workspace /Users/apple/.jenkins/workspace/longxin_a/eCloud.xcworkspace -scheme eCloud -configuration “Release” clean  #这个是生成xcarchive，Release的 xcodebuild -workspace /Users/apple/.jenkins/workspace/longxin_a/eCloud.xcworkspace -scheme eCloud -archivePath ${buildPath} -configuration “Release” archive  #这个是将xcarchive文件打包成ipa xcodebuild -exportArchive -archivePath ${buildPath} -exportPath ${ipaPath} -exportOptionsPlist ${exportOptionsplistPath} -allowProvisioningUpdates</p>\n</blockquote>\n<p><strong>邮箱通知</strong></p>\n<p>到这里，其实你就已经打包成功了，但是打包成功后是不是我们需要通知一些人呢？Jenkins是有邮件通知的。</p>\n<p>现在开始设置，首先你已经安装了插件Email Extension Plugin，这个在插件那里直接安装就好这是第一步；</p>\n<p>然后进入<strong>系统管理</strong>-&gt;<strong>系统设置</strong>找到<strong>Jenkins Location</strong>模块，在<strong>系统管理员邮件地址</strong>填写你的系统管理邮箱，这个邮箱是你发送通知邮件的邮箱，</p>\n<p>然后找到<strong>Extended E-mail Notification</strong>模块</p>\n<p>填写方法如图18图19</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-6aa97f934b9e01b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>图18</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-740f5dc4bb67defb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>图19</p>\n<p>然后找到<strong>构建后操作</strong>，点击<strong>增加构建后的操作步骤</strong>点击<strong>Editable Email Notification</strong>，在<strong>Project From</strong>里面写上管理者邮箱，也就是发送邮件的邮箱，然后点击<strong>Advanced Setting</strong>;</p>\n<p>里面有三个选项，分别是你在系统设置里面勾选的那几个，根据需求填写就好，我这里填写的是Always，也就是无论构建成功还是失败,<strong>Recipient List</strong>是接收者的邮箱，<strong>这里多个邮箱用英文逗号隔开——’,’</strong>详见图20</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-b58f75ffeb8b689f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>图20</p>\n<p>上传到fir</p>\n<p>先去下载fir插件</p>\n<p>然后在Jenkins里面点击<strong>系统管理</strong>-&gt;<strong>管理插件</strong>-&gt;<strong>高级</strong>，然后滑动到上传插件那里，选择刚才下载的插件，点击<strong>上传</strong>，等待上传成功后，进入到你的项目配置里面滑动到最下面，也就是找到<strong>构建后操作</strong>，点击<strong>增加构建后操作步骤</strong>，选择<strong>Upload to fir.im</strong>，打开你的浏览器，打开fir官方网站,获取方法见图21</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-fa9ca79d036f4791.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>21的</p>\n<p>然后输入你的<strong>IPA/APK Files (optional)</strong>这个是你ipa的路径，如果不选择，会是Jenkins默认的路径</p>\n<p>这里有fir的官方文档，根据fir的官方文档即可就可以Jenkins上传到fir文档</p>\n<p>到此为止关于Jenkins整合Xcode的配置项并自动上传到蒲公英差不多就说好了。那么可以稍微构建一下项目试试了，构建完项目后，你就会发现测试人员不需要天天来烦你，再也不需要听到“开发狗，赶紧给我安装一个最新的版本”了。</p>\n<p>各位可能会用到的友情链接：</p>\n<p><a href=\"https://www.cnblogs.com/xiami303/p/3625829.html\" target=\"_blank\" rel=\"noopener\">jenkins 密码错误去掉密码登录</a>(mac路径为/Users/用户名/.jenkins)</p>\n<p><a href=\"https://blog.csdn.net/qq105319914/article/details/52094463\" target=\"_blank\" rel=\"noopener\">Jenkins 修改登录密码</a></p>\n<p><a href=\"https://www.cnblogs.com/EasonJim/p/6277708.html\" target=\"_blank\" rel=\"noopener\">Jenkins 卸载</a></p>\n<p>参考教程：</p>\n<p><a href=\"http://blog.csdn.net/u014641783/article/details/50866196\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/u014641783/article/details/50866196</a></p>\n<p><a href=\"https://blog.x1be.win/index.php/2018/06/19/jenkins%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E3%80%81%E6%9E%84%E5%BB%BA%E3%80%81%E8%84%9A%E6%9C%AC%E3%80%81%E9%85%8D%E7%BD%AE%E9%82%AE%E7%AE%B1%E3%80%81%E4%B8%8A%E4%BC%A0fir/\" target=\"_blank\" rel=\"noopener\">https://blog.x1be.win/index.php/2018/06/19/jenkins%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E3%80%81%E6%9E%84%E5%BB%BA%E3%80%81%E8%84%9A%E6%9C%AC%E3%80%81%E9%85%8D%E7%BD%AE%E9%82%AE%E7%AE%B1%E3%80%81%E4%B8%8A%E4%BC%A0fir/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>参考各种教程实现Jenkins自动化打包遇到点坑，特此把自己成功安装的步骤记录一下。</p>\n<p><strong>一.安装jenkins</strong></p>\n<p><strong>首先使用osx系统自带的homebrew来安装jenkins。</strong></p>\n<p><strong>在终端中运行：</strong></p>\n<blockquote>\n<p><strong>$ brew install Jenkins</strong>  </p>\n<p>第一步需要安装至少java1.8 ，如果没有安装会有提示，<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">java安装地址</a></p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-e8624d879d33bacd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>无java时报错</p>\n<p>java安装完毕，继续下面步骤，链接 launchd 配置文件</p>\n<blockquote>\n<p>$ ln -sfv/usr/local/opt/jenkins/*.plist ~/Library/LaunchAgents  </p>\n<p>//如果要其他机器也可以访问，把ip地址改为广播地址:–httpListenAddress=0.0.0.0</p>\n<p>$ launchctl load~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist  </p>\n</blockquote>\n<p>命令行启动Jenkins</p>\n<blockquote>\n<p>$ jenkins</p>\n</blockquote>\n<p>一切顺利的话，打开浏览器输入：<a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/</a></p>\n<p>就能看到jenkins已经运行起来了，如果你更换了端口就是你后来设置的端口。</p>\n<p>接下来打开Jenkins后会让去一个填写password的页面如下图，存储password的地方就是图片上那行红色字体目录下，使用终端 cat + 红色字体路径就看到了</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-3744bb8265501e3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>然后将我们得到的password输入到“Administrator password“中，即可进入如下界面，接着安装一些建议的插件（左边的），安装过程中，有的插件可能会安装失败，强烈建议点击右下角的重试，直到把建议安装的都装好。（因为我这边安装之后，在Jenkins插件管理安装插件一直失败，如果这一步没把有些必须的插件装好，如git，只能一个个下载上传插件就很麻烦）</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-c330d4e3801bc125.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>插件安装完成后，可能会卡在如下界面，不会自动跳转，刷新下界面即可：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-92680cf279d6f69c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>插件</p>\n<p>在刷新后的界面中注册，输入用户名和密码，建议输入后点蓝色按钮保存完成，如下：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-355ccb29dace90e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>注册成功后，点击”Start using Jenkins”</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-1a9a2f3dd1fd7a2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/491\" alt=\"img\"></p>\n<p><strong>二.jenkins的使用</strong></p>\n<p><strong>到这一步，Jenkins的安装基本完成，接下来就是使用了，在新建任务之前需要安装好对应的插件</strong></p>\n<p><strong>1.安装插件</strong></p>\n<p><strong>Keychains and Provisioning Profiles Management（管理本地的keychain和iOS证书的插件）</strong></p>\n<p><strong>Xcode integration （用于xcode构建）</strong></p>\n<p><strong>打开系统管理，管理插件详见图</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-6bda0d917eb1d719.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p><strong>安装方式：</strong></p>\n<p><strong>方案一：在可选中搜索插件名 ，勾选安装。若安装报错（参照安装Jenkins时不能联网安装插件问题解决），如果还不行，直接进入方案二。</strong></p>\n<p><strong>方案二：去Jenkins-plug官网下载插件，然后选择高级tab，上传.hpi文件</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-3e2da1a793135b1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p><strong>2.配置Keychains and Provisioning Profiles Management</strong></p>\n<p>接下来配置Keychains and Provisioning Profiles Management，根据顺序选择首页&gt;<em>系统管理&gt;Keychains and Provisioning Profiles Management</em>如图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-7be0865bd31c03e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p><strong>需要上传login.keychain文件，该文件获取方法，在终端中输入</strong></p>\n<blockquote>\n<p>cd ~/Library/Keychains</p>\n</blockquote>\n<p><strong>在终端键入ls详见下图</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-df6b6eb19bce631d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>将login.keychain文件upload之后，会出现下图的界面，根据需要将证书添加进去即可，但是由于macOS10.12以及以后的系统里面没有login.keychain文件，只有login.keychain-db,可以复制出来删除-db，也可以创建一个快捷方式名字叫做login.keychain，upload就好了。（上传keychain，路径用自己改名后的那个）</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-13e8ae3bc326ce0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>然后添加Provisioning Profiles，上传方法和上传login.keychain一样，去选择Provisioning Profiles文件，然后upload，然后结果如下图，<strong>蓝色框</strong>内的是固定格式的<strong>/Users/用户名/Library/MobileDevice/Provisioning Profiles</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-c748ac2b114c670e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p><strong>3.开始配置任务</strong></p>\n<p>然后创建一个任务，自由风格的任务，因为构建方法会有两种,除了共同的地方，构建会分为两部分解答，第一部分是macOS10.12以前的构建方法，但是由于Jenkins的Xcode和Mac的系统版本问题，所以建议使用第二种方法。</p>\n<p>General</p>\n<p>创建一个自由风格的任务，然后在选择丢弃旧的构建，至于天数和保持的最大个数，按照自己的需求来就好，如图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-3ce2cf68feb817fc.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>源码管理</p>\n<p>接下来是源码管理，在<strong>Repository URL</strong>里面添加你的git地址，我这里添加的是<em>http</em>的，如果你的项目是使用的ssh的，那么就将git开头的地址填写上，然后店家<strong>Add</strong>添加你的git帐号，如果你的事ssh的，将ssh的密匙填写上，具体的自己百度一下就好咯，我就不多写了，结果如图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-60eaaca3a34ac160.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>构建触发器</p>\n<p>接下来是构建触发器，也就是什么时候触发自动打包我这里填写的是H 20 <em> </em> <em>这个意思就是H小时然后，后面跟着数字，在后面就是日月年，</em>代表的我认为是每次都触发，也就是每天每月每年，但是Jenkins的时间不是绝对的，一般都是在随机在半点，也就是设置20点，大概会在20:30分左右会触发，如果需要两个时间，那么格式可以这样H 20,22 <em> </em> *结果如图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-fb89921af6677d23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>构建环境</p>\n<p>在构建环境里面勾选<strong>Keychains and Code Signing Identities</strong>和<strong>Mobile Provisioning Profiles</strong>，<strong>Keychains and Code Signing Identities</strong>是打包需要的证书，<strong>Mobile Provisioning Profiles</strong>是打包需要的配置文件，都是可以自己选择的，我的如图14</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-6ba2dc28a1b1abb7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>接下来就是构建了，因为Jenkins对新版的Xcode插件兼容不好，只能用脚本来打包，但是老版本的Xcode可以使用Jenkins的Xcode插件，下面将构建一为使用Xcode插件的，构建二是脚本的</p>\n<p><strong>构建一，使用Xcode插件</strong></p>\n<p>在构建里面点击<strong>增加构建步骤</strong>，然后点击Xcode.</p>\n<p><strong>General build settings</strong></p>\n<p>在<strong>Target</strong>里面填写你的项目名称，<strong>Clean before build</strong>勾选YES，勾选<strong>Pack application, build and sign .ipa?</strong>，然后会有新的选项<strong>Export method</strong>是你要打的包的类型，就是你在手动打包的时候选额的ad-hoc或者Appstore那四个选项，这个按照你要打的类型填写，<strong>.ipa filename pattern</strong>是你打出包ipa的名字，我的这里填写了项目名字和-$(BUILD_DATE)，意思就是在后面追加时间，<strong>Output directory</strong>是导出ipa的目录，如果不填写，会在Jenkins默认的目录.</p>\n<p>详见图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-6dc4898f135c412b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p><strong>Code signing &amp; OS X keychain options</strong></p>\n<p>勾选<strong>Unlock Keychain?</strong>,在<strong>Keychain path</strong>那里填写${HOME}/Library/Keychains/login.keychain,意思是找到你的login.keychain（登陆钥匙串），如果你的是复制出来改的名字，<strong>那么就填写你相对应的目录</strong>，<strong>Keychain password</strong>就是你电脑的登陆密码。详见图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-09036c0b33938b73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p><strong>Advanced Xcode build options</strong></p>\n<p>勾选<strong>Clean test reports?</strong>，如果你使用了cocoapods那么填写<strong>Xcode Workspace File</strong>，如果没有使用cocoapods填写<strong>Xcode Project Directory</strong>，然后填写<strong>Build output directory</strong>就是你到处ipa的路径,详见图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-111db80c71ce4e00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>完成之后，回到任务操作页面，点击立即构建，如果配置没问题基本就能构建成功</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-8fe67e5458292a1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>构建进行中</p>\n<p><strong>偶尔会出现报错，点击任务编号，也就是上图的#4#5#6，然后进入任务详情页，进入控制台输出看看哪里出了问题，我之前是报了profile文件不匹配的error（target填错了），然后改了就好了</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-ef98f94e9f348e1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>控制台输出log</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-1809e09adaa3f87c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>成功，小太阳出来了</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-48e4f9a1f7c80d32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>对应目录生成了文件，所生成的内容也是需要自己选择配置的</p>\n<p><strong>构建二，使用脚本（蒲公英上传请参考<a href=\"https://www.jianshu.com/p/6bab38e569a5）\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/6bab38e569a5）</a></strong></p>\n<p>因为Jenkins对现在的Xcode9插件兼容性不好，打不了包，所以我们使用了<strong>xcodebuild</strong>打包，下面是我的脚本，并且里面附上了自己非常详细的注释，可能有点啰嗦。</p>\n<blockquote>\n<p>#!/bin/sh  #因为Jenkins打包可能是自动的，那么build号是不会自己再去修改然后push到git上面的，所以这个buildPlist就是修改build号的路径。 buildPlist=”/Users/apple/.jenkins/workspace/longxin_a/eCloud/Build/LongHu/Config/eCloud-Info.plist”  #这个获取现在的 月日时分 用它来做build号 buildNumber=$(date +”%m%d%H%M”)  #修改plist文件需要/usr/libexec/PlistBuddy -c命令，CFBundleVersion是修改的这个build号，$buildNumber是你要修改的数值，$buildPlist是你修改哪个地方的plist文件。 /usr/libexec/PlistBuddy -c “Set :CFBundleVersion $buildNumber” “$buildPlist”  #这个是获取当前的build号，本来是用来看看有没有修改成功的 #newBuildName=$(/usr/libexec/PlistBuddy -c “print :CFBundleVersion” “$buildPlist”) #这个是打印，带自动换行的打印 echo $newBuildName  #因为我怕他修改plist的时候需要时间，所以索性在这里我让他等了3秒，当然你也可以去掉 sleep 3  #这个buildPath是到时候我生成xcarchive文件的路径和打ipa时候需要找到xcarchive的路径 buildPath=”/Users/apple/.jenkins/workspace/longxin_a/build/Release-iphoneos/eCloud.xcarchive”  #这个路径是我生成ipa的路径 ipaPath=”/Users/apple/Documents/longhuBuild/“  #这个是ExportOptions.plist的路径，有这个就不用在用脚本写证书了，这个plist你只要手动打过包，那么在生成ipa的文件夹里面就会有，找一个自己不经常修改的地方放在那里，写上这个路径就好，当然如果你不想这么做，想用shell语言设置证书，我会在 问题 列表里面有介绍 exportOptionsplistPath=’/Users/apple/.jenkins/workspace/ExportOptions.plist’  #因为我使用了cocoapods所以这里用的-workspace，如果你没有使用cocoapods使用-project，下面的命令都一样 #这个命令主要是用来clean，clean的是Release的路径，clean的是/Users/app***eCloud.xcworkspace路径的eCloud， xcodebuild -workspace /Users/apple/.jenkins/workspace/longxin_a/eCloud.xcworkspace -scheme eCloud -configuration “Release” clean  #这个是生成xcarchive，Release的 xcodebuild -workspace /Users/apple/.jenkins/workspace/longxin_a/eCloud.xcworkspace -scheme eCloud -archivePath ${buildPath} -configuration “Release” archive  #这个是将xcarchive文件打包成ipa xcodebuild -exportArchive -archivePath ${buildPath} -exportPath ${ipaPath} -exportOptionsPlist ${exportOptionsplistPath} -allowProvisioningUpdates</p>\n</blockquote>\n<p><strong>邮箱通知</strong></p>\n<p>到这里，其实你就已经打包成功了，但是打包成功后是不是我们需要通知一些人呢？Jenkins是有邮件通知的。</p>\n<p>现在开始设置，首先你已经安装了插件Email Extension Plugin，这个在插件那里直接安装就好这是第一步；</p>\n<p>然后进入<strong>系统管理</strong>-&gt;<strong>系统设置</strong>找到<strong>Jenkins Location</strong>模块，在<strong>系统管理员邮件地址</strong>填写你的系统管理邮箱，这个邮箱是你发送通知邮件的邮箱，</p>\n<p>然后找到<strong>Extended E-mail Notification</strong>模块</p>\n<p>填写方法如图18图19</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-6aa97f934b9e01b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>图18</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-740f5dc4bb67defb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>图19</p>\n<p>然后找到<strong>构建后操作</strong>，点击<strong>增加构建后的操作步骤</strong>点击<strong>Editable Email Notification</strong>，在<strong>Project From</strong>里面写上管理者邮箱，也就是发送邮件的邮箱，然后点击<strong>Advanced Setting</strong>;</p>\n<p>里面有三个选项，分别是你在系统设置里面勾选的那几个，根据需求填写就好，我这里填写的是Always，也就是无论构建成功还是失败,<strong>Recipient List</strong>是接收者的邮箱，<strong>这里多个邮箱用英文逗号隔开——’,’</strong>详见图20</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-b58f75ffeb8b689f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>图20</p>\n<p>上传到fir</p>\n<p>先去下载fir插件</p>\n<p>然后在Jenkins里面点击<strong>系统管理</strong>-&gt;<strong>管理插件</strong>-&gt;<strong>高级</strong>，然后滑动到上传插件那里，选择刚才下载的插件，点击<strong>上传</strong>，等待上传成功后，进入到你的项目配置里面滑动到最下面，也就是找到<strong>构建后操作</strong>，点击<strong>增加构建后操作步骤</strong>，选择<strong>Upload to fir.im</strong>，打开你的浏览器，打开fir官方网站,获取方法见图21</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3499748-fa9ca79d036f4791.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"img\"></p>\n<p>21的</p>\n<p>然后输入你的<strong>IPA/APK Files (optional)</strong>这个是你ipa的路径，如果不选择，会是Jenkins默认的路径</p>\n<p>这里有fir的官方文档，根据fir的官方文档即可就可以Jenkins上传到fir文档</p>\n<p>到此为止关于Jenkins整合Xcode的配置项并自动上传到蒲公英差不多就说好了。那么可以稍微构建一下项目试试了，构建完项目后，你就会发现测试人员不需要天天来烦你，再也不需要听到“开发狗，赶紧给我安装一个最新的版本”了。</p>\n<p>各位可能会用到的友情链接：</p>\n<p><a href=\"https://www.cnblogs.com/xiami303/p/3625829.html\" target=\"_blank\" rel=\"noopener\">jenkins 密码错误去掉密码登录</a>(mac路径为/Users/用户名/.jenkins)</p>\n<p><a href=\"https://blog.csdn.net/qq105319914/article/details/52094463\" target=\"_blank\" rel=\"noopener\">Jenkins 修改登录密码</a></p>\n<p><a href=\"https://www.cnblogs.com/EasonJim/p/6277708.html\" target=\"_blank\" rel=\"noopener\">Jenkins 卸载</a></p>\n<p>参考教程：</p>\n<p><a href=\"http://blog.csdn.net/u014641783/article/details/50866196\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/u014641783/article/details/50866196</a></p>\n<p><a href=\"https://blog.x1be.win/index.php/2018/06/19/jenkins%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E3%80%81%E6%9E%84%E5%BB%BA%E3%80%81%E8%84%9A%E6%9C%AC%E3%80%81%E9%85%8D%E7%BD%AE%E9%82%AE%E7%AE%B1%E3%80%81%E4%B8%8A%E4%BC%A0fir/\" target=\"_blank\" rel=\"noopener\">https://blog.x1be.win/index.php/2018/06/19/jenkins%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E3%80%81%E6%9E%84%E5%BB%BA%E3%80%81%E8%84%9A%E6%9C%AC%E3%80%81%E9%85%8D%E7%BD%AE%E9%82%AE%E7%AE%B1%E3%80%81%E4%B8%8A%E4%BC%A0fir/</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjjsev21k0000cgqrpxw5sn75","tag_id":"cjjsev21r0001cgqrlg3xnp6m","_id":"cjjsev21v0004cgqr9y03ydq6"},{"post_id":"cjjsev21k0000cgqrpxw5sn75","tag_id":"cjjsev21t0002cgqrdqq4excy","_id":"cjjsev21v0005cgqrfsy9yxy4"},{"post_id":"cjjsev21k0000cgqrpxw5sn75","tag_id":"cjjsev21u0003cgqruuboxxs6","_id":"cjjsev21v0006cgqre2bjl9mw"},{"post_id":"cjjsev22d0007cgqrdy5nril8","tag_id":"cjjsev21t0002cgqrdqq4excy","_id":"cjjsev22j0008cgqr4ebnffcc"},{"post_id":"cjjsev22d0007cgqrdy5nril8","tag_id":"cjjsev21u0003cgqruuboxxs6","_id":"cjjsev22j0009cgqrt0ai55sw"}],"Tag":[{"name":"随笔","_id":"cjjsev21r0001cgqrlg3xnp6m"},{"name":"iOS","_id":"cjjsev21t0002cgqrdqq4excy"},{"name":"Python","_id":"cjjsev21u0003cgqruuboxxs6"}]}}